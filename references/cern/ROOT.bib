
@article{1997-Brun-NIMA-389-81,
   title = "{ROOT} --- An object oriented data analysis framework",
   journal = "Nucl. Instrum. Methods Phys. Res., Sect. A",
   volume = "389",
   number = "1",
   pages = "81--86",
   year = "1997",
   %note = "New Computing Techniques in Physics Research V",
   issn = "0168-9002",
   doi = "10.1016/S0168-9002(97)00048-X",
   url = "http://www.sciencedirect.com/science/article/pii/S016890029700048X",
   author = "Rene Brun and Fons Rademakers",
   abstract = "The ROOT system in an Object Oriented framework for large scale data analysis. ROOT written in C++, contains, among others, an efficient hierarchical OO database, a C++ interpreter, advanced statistical analysis (multi-dimensional histogramming, fitting, minimization, cluster finding algorithms) and visualization tools. The user interacts with ROOT via a graphical user interface, the command line or batch scripts. The command and scripting language is C++ (using the interpreter) and large scripts can be compiled and dynamically linked in. The OO database design has been optimized for parallel access (reading as well as writing) by multiple processes."
}

@unpublished{pyroot,
   title = {Reflection-Based {Python}-{C++} Bindings},
   author = {Generowicz, Jacek and Lavrijsen, Wim T. L. P. and Marino, Massimo Mato, Pere},
   year = {2004},
   url = {https://escholarship.org/uc/item/5v77c06z}
}

@article{2008-Moneta-JPCS-119-042023,
   doi = {10.1088/1742-6596/119/4/042023},
   url = {https://doi.org/10.1088/1742-6596/119/4/042023},
   year = {2008},
   month = {jul},
   publisher = {IOP Publishing},
   volume = {119},
   number = {4},
   pages = {042023},
   author = {L. Moneta and I. Antcheva and R. Brun},
   title = {Recent developments of the {ROOT} mathematical and statistical software},
   journal = {J. Phys.: Conf. Ser.},
   abstract = {Advanced mathematical and statistical computational methods are required by the LHC experiments to analyzed their data. These methods are provided by the Math work package of the ROOT project. An overview of the recent developments of this work package is presented by describing the restructuring of the core mathematical library in a coherent set of C++ classes and interfaces. The achieved improvements, in terms of performances and quality, of numerical methods present in ROOT are shown as well. New developments in the fitting and minimization packages are reviewed. A new graphics interface has been developed to drive the fitting process and new classes are being introduced to extend the fitting functionality. Furthermore, recent and planned developments of integrating in the ROOT environment new advanced statistical tools required for the analysis of the LHC data are presented.}
}

@article{2009-Antcheva-CPC-180-2499,
   title = "{ROOT} --- A {C++} framework for petabyte data storage, statistical analysis and visualization",
   journal = "Comput. Phys. Commun.",
   volume = "180",
   number = "12",
   pages = "2499--2512",
   year = "2009",
   %note = "40 YEARS OF CPC: A celebratory issue focused on quality software for high performance, grid and novel computing architectures",
   issn = "0010-4655",
   doi = " 10.1016/j.cpc.2009.08.005",
   url = "http://www.sciencedirect.com/science/article/pii/S0010465509002550",
   author = "I. Antcheva and M. Ballintijn and B. Bellenot and M. Biskup and R. Brun and N. Buncic and Ph. Canal and D. Casadei and O. Couet and V. Fine and L. Franco and G. Ganis and A. Gheata and D. Gonzalez Maline and M. Goto and J. Iwaszkiewicz and A. Kreshuk and D. Marcos Segura and R. Maunder and L. Moneta and A. Naumann and E. Offermann and V. Onuchin and S. Panacek and F. Rademakers and P. Russo and M. Tadel",
   keywords = "C++, Object-oriented, Framework, Interpreter, Data storage, Data analysis, Visualization",
   abstract = "ROOT is an object-oriented C++ framework conceived in the high-energy physics (HEP) community, designed for storing and analyzing petabytes of data in an efficient way. Any instance of a C++ class can be stored into a ROOT file in a machine-independent compressed binary format. In ROOT the TTree object container is optimized for statistical data analysis over very large data sets by using vertical data storage techniques. These containers can span a large number of files on local disks, the web, or a number of different shared file systems. In order to analyze this data, the user can chose out of a wide set of mathematical and statistical functions, including linear algebra classes, numerical algorithms such as integration and minimization, and various methods for performing regression analysis (fitting). In particular, the RooFit package allows the user to perform complex data modeling and fitting while the RooStats library provides abstractions and implementations for advanced statistical tools. Multivariate classification methods based on machine learning techniques are available via the TMVA package. A central piece in these analysis tools are the histogram classes which provide binning of one- and multi-dimensional data. Results can be saved in high-quality graphical formats like Postscript and PDF or in bitmap formats like JPG or GIF. The result can also be stored into ROOT macros that allow a full recreation and rework of the graphics. Users typically create their analysis macros step by step, making use of the interactive C++ interpreter CINT, while running over small data samples. Once the development is finished, they can run these macros at full compiled speed over large data sets, using on-the-fly compilation, or by creating a stand-alone batch program. Finally, if processing farms are available, the user can reduce the execution time of intrinsically parallel tasks — e.g. data mining in HEP — by using PROOF, which will take care of optimally distributing the work over the available resources in a transparent way."
}

@article{2011-Antcheva-CPC-182-1384,
   title = "{ROOT} --- A {C++} framework for petabyte data storage, statistical analysis and visualization",
   journal = "Comput. Phys. Commun.",
   volume = "182",
   number = "6",
   pages = "1384--1385",
   year = "2011",
   issn = "0010-4655",
   doi = " 10.1016/j.cpc.2011.02.008",
   url = "http://www.sciencedirect.com/science/article/pii/S0010465511000701",
   author = "I. Antcheva and M. Ballintijn and B. Bellenot and M. Biskup and R. Brun and N. Buncic and Ph. Canal and D. Casadei and O. Couet and V. Fine and L. Franco and G. Ganis and A. Gheata and D. Gonzalez Maline and M. Goto and J. Iwaszkiewicz and A. Kreshuk and D. Marcos Segura and R. Maunder and L. Moneta and A. Naumann and E. Offermann and V. Onuchin and S. Panacek and F. Rademakers and P. Russo and M. Tadel",
   keywords = "C++, Object-oriented, Framework, Interpreter, Data storage, Data analysis, Visualization",
   abstract = "A new stable version (“production version”) v5.28.00 of ROOT [1] has been published [2]. It features several major improvements in many areas, most noteworthy data storage performance as well as statistics and graphics features. Some of these improvements have already been predicted in the original publication Antcheva et al. (2009) [3]. This version will be maintained for at least 6 months; new minor revisions (“patch releases”) will be published [4] to solve problems reported with this version."
}

@article{2012-Vasilev-JPCS-396-052071,
   doi = {10.1088/1742-6596/396/5/052071},
   url = {https://doi.org/10.1088/1742-6596/396/5/052071},
   year = {2012},
   month = {dec},
   publisher = {IOP Publishing},
   volume = {396},
   number = {5},
   pages = {052071},
   author = {V. Vasilev and Ph. Canal and A. Naumann and P. Russo},
   title = {{Cling} --- The New Interactive Interpreter for {ROOT} 6},
   journal = {J. Phys.: Conf. Ser.},
   abstract = {Cling is an interactive C++ interpreter, built on top of Clang and LLVM compiler infrastructure. Like its predecessor Cint, Cling realizes the read-print-evaluate-loop concept, in order to leverage rapid application development. Implemented as a small extension to LLVM and Clang, the interpreter reuses their strengths such as the praised concise and expressive compiler diagnostics. We show how to match the interpreter concept to the compiler library and generalize common set of requirements for building up an interactive interpreter. We reason the design and implementation decisions as solution to the challenge of implementing interpreter behaviour as an extension of the compiler library. We present the new features, e.g. how C++11 will come to Cling and how Cint-specific extensions are being adopted. We clarify the state of integration in the ROOT framework and the induced change set. We explain how ROOT dictionaries are simplified due to the new interpreter.}
}

@article{2015-Vassilev-JPCS-608-012055,
   doi = {10.1088/1742-6596/608/1/012055},
   url = {https://doi.org/10.1088/1742-6596/608/1/012055},
   year = {2015},
   month = {may},
   publisher = {IOP Publishing},
   volume = {608},
   pages = {012055},
   author = {V. Vassilev and M. Vassilev and A. Penev and L. Moneta and V. Ilieva},
   title = {{Clad} --- Automatic Differentiation Using {Clang} and {LLVM}},
   journal = {J. Phys.: Conf. Ser.},
   abstract = {Differentiation is ubiquitous in high energy physics, for instance in minimization algorithms and statistical analysis, in detector alignment and calibration, and in theory. Automatic differentiation (AD) avoids well-known limitations in round-offs and speed, which symbolic and numerical differentiation suffer from, by transforming the source code of functions. We will present how AD can be used to compute the gradient of multi-variate functions and functor objects. We will explain approaches to implement an AD tool. We will show how LLVM, Clang and Cling (ROOT's C++11 interpreter) simplifies creation of such a tool. We describe how the tool could be integrated within any framework. We will demonstrate a simple proof-of-concept prototype, called Clad, which is able to generate n-th order derivatives of C++ functions and other language constructs. We also demonstrate how Clad can offload laborious computations from the CPU using OpenCL.}
}

@article{2017-Vassilev-JPCS-898-072023,
   doi = {10.1088/1742-6596/898/7/072023},
   url = {https://doi.org/10.1088/1742-6596/898/7/072023},
   year = {2017},
   month = {oct},
   publisher = {IOP Publishing},
   volume = {898},
   pages = {072023},
   author = {Vassil Vassilev},
   title = {Optimizing {ROOT}'s Performance Using {C++} Modules},
   journal = {J. Phys.: Conf. Ser.},
   abstract = {ROOT comes with a C++ compliant interpreter cling. Cling needs to understand the content of the libraries in order to interact with them. Exposing the full shared library descriptors to the interpreter at runtime translates into increased memory footprint. ROOT’s exploratory programming concepts allow implicit and explicit runtime shared library loading. It requires the interpreter to load the library descriptor. Re-parsing of descriptors’ content has a noticeable effect on the runtime performance. Present state-of-art lazy parsing technique brings the runtime performance to reasonable levels but proves to be fragile and can introduce correctness issues. An elegant solution is to load information from the descriptor lazily and in a non-recursive way. The LLVM community advances its C++ Modules technology providing an io-efficient, on-disk representation capable to reduce build times and peak memory usage. The feature is standardized as a C++ technical specification. C++ Modules are a flexible concept, which can be employed to match CMS and other experiments’ requirement for ROOT: to optimize both runtime memory usage and performance. Cling technically “inherits” the feature, however tweaking it to ROOT scale and beyond is a complex endeavor. The paper discusses the status of the C++ Modules in the context of ROOT, supported by few preliminary performance results. It shows a step-by-step migration plan and describes potential challenges which could appear.}
}

@phdthesis{2018-VallsPla-PhD,
   title = "Multi-level Parallelization in {ROOT}: New Patterns, Libraries and Utilities",
   author = "Valls Pla, Xavier",
   year = "2018",
   month = "10",
   day = "19",
   doi = "10.6035/14101.2018.178448",
   school = "Universitat Jaume I",
   address = "Castelló de la Plana, Spain",
   abstract = "The Large Hadron Collider (LHC) is generating Physics data at an unprecedented rate that is expected to continue increasing in the future. This situation results in increasing demands in computation and processing power for analyzing the LHC data. At the same time, modern architectures have switched from a sequential processing paradigm to a parallel one. In order to take full advantage of new computer architectures, to improve performance with increasing amounts of data to analyze, and to reduce development time and complexity, ROOT, the official LHC analysis framework, is undertaking a modernization effort to cope with the computational challenges posed by the ambitious physics program of the LHC. We contribute to this modernization effort by implementing patterns, introducing libraries and developing utilities for the parallelization of ROOT at multiple levels, improving the programming model and providing backward compatibility."
}

@article{2018-VallsPla-JPCS-1085-032024,
   doi = {10.1088/1742-6596/1085/3/032024},
   url = {https://doi.org/10.1088/1742-6596/1085/3/032024},
   year = {2018},
   month = {sep},
   publisher = {IOP Publishing},
   volume = {1085},
   pages = {032024},
   author = {X. {Valls Pla} and L. Moneta},
   title = {Parallelization and vectorization of {ROOT} fitting classes},
   journal = {J. Phys.: Conf. Ser.},
   abstract = {We introduce parallelization and vectorization in ROOT mathematical and statistical libraries in order to take full advantage of new computer architectures and to maximize the CPU usage with an increasing amount of data to analyze. As part of this effort, we define in ROOT new generic classes supporting a task-based parallelization mode, which can be used for a wide range of computational tasks in the field of High Energy Physics. We also include support for different SIMD libraries, by including in ROOT a new generic library for vectorization. These different parallelization tools are applied together when parallelizing the minimization process for solving fitting problems. We report on the improvements obtained by adding the support for SIMD vectorization and multithreaded parallelization when fitting ROOT histograms and datasets represented by ROOT trees.}
}

@article{2018-Amadio-JPCP-1085-032034,
   doi = {10.1088/1742-6596/1085/3/032034},
   url = {https://doi.org/10.1088/1742-6596/1085/3/032034},
   year = {2018},
   month = {sep},
   publisher = {IOP Publishing},
   volume = {1085},
   pages = {032034},
   author = {G. Amadio and P. Canal and D. Piparo and S. Wenzel},
   title = {Speeding up software with {VecCore}},
   journal = {J. Phys.: Conf. Ser.},
   abstract = {Portable and efficient vectorization is a significant challenge in large software projects such as GeantV, ROOT, and experiments’ frameworks. Nevertheless, fully exploiting SIMD parallelism will be a required step in order to bridge the widening gap between the needs and availability of computing resouces for data analysis and processing in particle physics. Although there are SIMD libraries that wrap compiler intrinsics into a convenient interface, they do not always support all available architectures, or they only perform well in some of them. The VecCore library was created to address some of these performance and portability issues by providing a unified abstraction layer on top of existing libraries, such as Vc or UME::SIMD. In this article, we discuss VecCore’s programming model for SIMD code and some use cases in HEP software packages such as VecGeom and GeantV.}
}

@article{2019-Valls-EPJWC-214-05043,
   author = "Valls, Xavier and Moneta, Lorenzo and Amadio, Guilherme and Tsang, Arthur",
   title = "New developments in the {ROOT} fitting classes",
   DOI= "10.1051/epjconf/201921405043",
   url= "https://doi.org/10.1051/epjconf/201921405043",
   journal = "EPJ Web Conf.",
   year = "2019",
   volume = "214",
   pages = "05043",
}

@article{2020-Vasilev-EPJWC-245-02015,
   author = "Vassilev, Vassil and Efremov, Aleksandr and Shadura, Oksana",
   title = "Automatic Differentiation in {ROOT}",
   DOI = "10.1051/epjconf/202024502015",
   url = "https://doi.org/10.1051/epjconf/202024502015",
   journal = {EPJ Web Conf.},
   year = "2020",
   volume = "245",
   pages = "02015",
   % eprinttype = "arxiv",
   % eprint = "2004.04435",
   % eprintclass = "cs.MS"
}

