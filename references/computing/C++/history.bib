
@article{1993-Stroustrup-SN-28-271,
	author = {Stroustrup, Bjarne},
	title = {A History of {C++}: 1979--1991},
	year = {1993},
	issue_date = {March 1993},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {28},
	number = {3},
	issn = {0362-1340},
	url = {https://doi.org/10.1145/155360.155375},
	doi = {10.1145/155360.155375},
	abstract = {This paper outlines the history of the C++ programming language. The emphasis is on the ideas, constraints, and people that shaped the language, rather than the minuitiae of language features. Key design decisions relating to language features are discussed, but the focus is on the overall design goals and practical constraints. The evolution of C++ is traced from C with Classes to the current ANSI and ISO standards work and the explosion of use, interest, commercial activity, compilers, tools, environments, and libraries.},
	journal = {SIGPLAN Not.},
	month = {mar},
	pages = {271–-297},
	numpages = {27}
}

@inproceedings{1993-Stroustrup-HOPL-2-271,
	author = {Stroustrup, Bjarne},
	title = {A History of {C++}: 1979--1991},
	year = {1993},
	isbn = {0897915704},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/154766.155375},
	doi = {10.1145/154766.155375},
	abstract = {This paper outlines the history of the C++ programming language. The emphasis is on the ideas, constraints, and people that shaped the language, rather than the minuitiae of language features. Key design decisions relating to language features are discussed, but the focus is on the overall design goals and practical constraints. The evolution of C++ is traced from C with Classes to the current ANSI and ISO standards work and the explosion of use, interest, commercial activity, compilers, tools, environments, and libraries.},
	booktitle = {Proceedings of {HOPL-II}},
	series = {{ACM} {SIGPLAN} Conference on History of Programming Languages},
	volume = {2},
	pages = {271–-297},
	numpages = {27},
	location = {Cambridge, Massachusetts, USA},
	% series = {HOPL-II}
}

@inproceedings{2007-Stroustrup-HOPL-3-4-1,
	author = {Stroustrup, Bjarne},
	title = {Evolving a Language in and for the Real World: {C++} 1991--2006},
	year = {2007},
	isbn = {9781595937667},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	url = {https://doi.org/10.1145/1238844.1238848},
	doi = {10.1145/1238844.1238848},
	abstract = {This paper outlines the history of the C++ programming language from the early days of its ISO standardization (1991), through the 1998 ISO standard, to the later stages of the C++0x revision of that standard (2006). The emphasis is on the ideals, constraints, programming techniques, and people that shaped the language, rather than the minutiae of language features. Among the major themes are the emergence of generic programming and the STL (the C++ standard library's algorithms and containers). Specific topics include separate compilation of templates, exception handling, and support for embedded systems programming. During most of the period covered here, C++ was a mature language with millions of users. Consequently, this paper discusses various uses of C++ and the technical and commercial pressures that provided the background for its continuing evolution.},
	booktitle = {Proceedings of {HOPL-III}},
	series = {{ACM} {SIGPLAN} Conference on History of Programming Languages},
	volume = {3},
	pages = {4-1--4-59},
	keywords = {libraries, programming language, ISO, STL, multi-paradigm programming, language use, history, evolution, standardization, C++},
	location = {San Diego, California},
	% series = {HOPL III}
}

@article{2020-Stroustrup-PACMPL-4-70,
	author = {Stroustrup, Bjarne},
	title = {Thriving in a Crowded and Changing World: {C++} 2006--2020},
	year = {2020},
	issue_date = {June 2020},
	publisher = {Association for Computing Machinery},
	address = {New York, NY, USA},
	volume = {4},
	number = {HOPL},
	url = {https://doi.org/10.1145/3386320},
	doi = {10.1145/3386320},
	abstract = {By 2006, C++ had been in widespread industrial use for 20 years. It contained parts that had survived unchanged since introduced into C in the early 1970s as well as features that were novel in the early 2000s. From 2006 to 2020, the C++ developer community grew from about 3 million to about 4.5 million. It was a period where new programming models emerged, hardware architectures evolved, new application domains gained massive importance, and quite a few well-financed and professionally marketed languages fought for dominance. How did C++ -- an older language without serious commercial backing -- manage to thrive in the face of all that?  This paper focuses on the major changes to the ISO C++ standard for the 2011, 2014, 2017, and 2020 revisions. The standard library is about 3/4 of the C++20 standard, but this paper's primary focus is on language features and the programming techniques they support.  The paper contains long lists of features documenting the growth of C++. Significant technical points are discussed and illustrated with short code fragments. In addition, it presents some failed proposals and the discussions that led to their failure. It offers a perspective on the bewildering flow of facts and features across the years. The emphasis is on the ideas, people, and processes that shaped the language.  Themes include efforts to preserve the essence of C++ through evolutionary changes, to simplify its use, to improve support for generic programming, to better support compile-time programming, to extend support for concurrency and parallel programming, and to maintain stable support for decades' old code.  The ISO C++ standard evolves through a consensus process. Inevitably, there is competition among proposals and clashes (usually polite ones) over direction, design philosophies, and principles. The committee is now larger and more active than ever, with as many as 250 people turning up to week-long meetings three times a year and many more taking part electronically. We try (not always successfully) to mitigate the effects of design by committee, bureaucratic paralysis, and excessive enthusiasm for a variety of language fashions.  Specific language-technical topics include the memory model, concurrency and parallelism, compile-time computation, move-semantics, exceptions, lambda expressions, and modules. Designing a mechanism for specifying a template's requirements on its arguments that is sufficiently flexible and precise yet doesn't impose run-time costs turned out to be hard. The repeated attempts to design ``concepts'' to do that have their roots back in the 1980s and touch upon many key design issues for C++ and for generic programming.  The description is based on personal participation in the key events and design decisions, backed by the thousands of papers and hundreds of meeting minutes in the ISO C++ standards committee's archives.},
	journal = {Proc. ACM Program. Lang.},
	month = {jun},
	% articleno = {70},
	pages = {70},
	numpages = {168},
	keywords = {simplification of language use, programming language design and evolution, standardization, resource management, C++, concurrency and parallelism, generic programming}
}

